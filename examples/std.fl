# This Source Form is subject to the terms of the AQUA Software License,
# v. 1.0. Copyright (c) 2024 Aymeric Wibo

## The `str` class provides methods on the builtin string type.
extern class str {
	## *Check* if a string ends with the given suffix.

	## ```fl
	## s = "Hello world!"
	## assert s.ends_with("world!") == true
	## assert s.ends_with("world") == false
	## ```
	extern pure fn ends_with(self, suffix: str) -> bool;
}

## The `vec` class provides methods on the builtin vector type.
extern class vec {
	## Filter the elements of the vector based on a predicate.
	## For example, a list of numbers could be filtered to only include the even ones.
	##
	## ```fl
	## assert [1, 2, 3, 4, 5].where(fn(x) x % 2 == 0) === [2, 4]
	## ```
	extern pure fn where(self, filter: fn(subject) -> bool) -> vec;

	## Apply a function to each element of the vector.
	## For example, a list of numbers could be squared.
	##
	## ```fl
	## assert [1, 2, 3, 4, 5].map(fn(x) x ** 2) === [1, 4, 9, 16, 25]
	## ```
	extern pure fn map(self, action: fn(subject)) -> vec;

	## Concatenate two vectors.
	##
	## ```fl
	## assert [4, 2, 0] ++ [6, 9] === [4, 2, 0, 6, 9]
	## ```
	extern pure fn ++(self, other: vec) -> vec;

	## Check if two vectors are equal.
	##
	## ```fl
	## assert ([4, 2, 0] === [4, 2, 0]) == true
	## assert ([4, 2, 0] === [4, 2, 1]) == false
	## ```
	extern pure fn ===(self, other: vec) -> bool;
}

## The `Fs` class provides methods to interact with the filesystem.
extern class Fs {
	## List the files in a directory.
	## If given a depth greater or equal to 0, it will list the files recursively up to the given depth.
	## A depth of -1 will list all files at an infinite depth.
	## The order of the entries is not guaranteed.
	##
	## ```fl
	## assert Fs.list(".") === [] # TODO
	## assert Fs.list(".", 0) === [] # TODO
	## assert Fs.list(".", 1) === [] # TODO
	## ```
	extern pure fn list(path: str, depth: int = -1) -> vec<str>;
}

## The `Sys` class provides methods to interact with the system.
extern class Sys {
	## Execute a command with arguments.
	## The command is executed in a new process.
	## The return value is the exit code of the command.
	## Capturing the standard output of the command is unsupported at the moment :(
	##
	## ```fl
	## assert Sys.exec("echo", ["Hello", "world!"]) == 0
	## ```
	extern pure fn exec(cmd: str, args: vec<str>) -> int;
}
