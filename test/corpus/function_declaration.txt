===
Function declaration
===

fn function_without_params {
	print "Hello world!"
}

fn function_without_params_but_with_parentheses() {
	print "Hello world!"
}

fn function_with_one_param(a) {
	print "Hello world!"
}

fn function_with_multiple_params(a, b, c) {
	print "Hello world!"
}

fn function_with_types(a: str, b: str) -> str {
	return "Hello world!"
}

---

(source_file
	(statement
		(function_declaration
			name: (identifier)
			body: (statement
				(block
					body: (statement
						(print
							msg: (expression
								(literal
									(string)
								)
							)
						)
					)
				)
			)
		)
	)
	(statement
		(function_declaration
			name: (identifier)
			body: (statement
				(block
					body: (statement
						(print
							msg: (expression
								(literal
									(string)
								)
							)
						)
					)
				)
			)
		)
	)
	(statement
		(function_declaration
			name: (identifier)
			params: (param_list
				(param
					ident: (identifier)
				)
			)
			body: (statement
				(block
					body: (statement
						(print
							msg: (expression
								(literal
									(string)
								)
							)
						)
					)
				)
			)
		)
	)
	(statement
		(function_declaration
			name: (identifier)
			params: (param_list
				(param
					ident: (identifier)
				)
				(param
					ident: (identifier)
				)
				(param
					ident: (identifier)
				)
			)
			body: (statement
				(block
					body: (statement
						(print
							msg: (expression
								(literal
									(string)
								)
							)
						)
					)
				)
			)
		)
	)
	(statement
		(function_declaration
			name: (identifier)
			params: (param_list
				(param
					ident: (identifier)
					type: (type
						(type_name
							(identifier
								(primitive_type)
							)
						)
					)
				)
				(param
					ident: (identifier)
					type: (type
						(type_name
							(identifier
								(primitive_type)
							)
						)
					)
				)
			)
			ret_type: (type
				(type_name
					(identifier
						(primitive_type)
					)
				)
			)
			body: (statement
				(block
					body: (statement
						(return
							rv: (expression
								(literal
									(string)
								)
							)
						)
					)
				)
			)
		)
	)
)
